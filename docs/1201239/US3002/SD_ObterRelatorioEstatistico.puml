@startuml

autonumber
actor "Sales Manager" as SM
participant ObterRelatorioEstatisticoUI as UI <<presentation>>
participant ObterRelatorioEstatisticoController as Controller <<application>>
participant ListQuestionnaireDTOService as serv <<application>>
participant "Questionnaire" as Domain <<domain>>
participant "QuestionnaireDTO" as DTO <<dto>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database SurveyRepository as repository <<repository>>
database AnswerRepository as ansrepository <<repository>>

activate SM
SM -> UI : Inicia o processo de obter o relatório\n estatístico de um determinado questionário
activate UI
UI->Controller: findAllQuestionnaires()
activate Controller

Controller -> serv: getSurveys()
activate serv
serv-> Persistence: repositories()
activate Persistence
Persistence -> Factory: create
Persistence -> serv: factory
deactivate Persistence
serv -> Factory: surveys()
activate Factory
Factory -> repository: create
Factory -> serv: repository
deactivate Factory
serv->repository:findAll()
activate repository
repository -->serv: surveys
deactivate repository
loop
serv -> Domain: toDTO()
activate Domain
end
deactivate Domain
serv --> Controller : surveysDTOList
deactivate serv
Controller --> UI : surveysDTOList
deactivate Controller
UI --> SM : Mostra os questionários que existem
deactivate UI
SM -> UI : Seleciona o questionário que\n pretende obter o relatório
activate UI
UI -> Controller : obterQuantidadeClientesInquiridos(id)
activate Controller
Controller -> repository : questionnaire = findIdentifier(id)
activate repository
deactivate repository
Controller -> Domain : getQuantityInquiredCustomers()
activate Domain
deactivate Domain
deactivate Controller
UI -> Controller : obterQuantidadeRespostas(id)
activate Controller
Controller -> repository : questionnaire = findByIdentifier(id)
activate repository
deactivate repository
Controller -> Domain : getAmountAnswered()
activate Domain
deactivate Domain
deactivate Controller
UI -> Controller : obterQuestoes(id)
activate Controller
Controller -> repository : questionnaire = findByIdentifier(id)
activate repository
deactivate repository
Controller -> Domain : getSections()
activate Domain
deactivate Domain
deactivate Controller
UI -> Controller : obterQuantidadeRespostasOpcao(questionId,op,surveyId)
activate Controller
Controller -> ansrepository : findAll()
activate ansrepository
deactivate ansrepository
deactivate Controller
UI -> Controller : obterQuantClientesRespondeuPergunta(questionId, surveyId)
activate Controller
Controller -> ansrepository : findAll()
activate ansrepository
deactivate ansrepository
deactivate Controller
UI -> Controller : obterRespostaMedia(questionId, id)
activate Controller
Controller -> ansrepository : findAll()
activate ansrepository
deactivate ansrepository
deactivate Controller

UI -> Controller : obterQuantidadeRespostasOutra(questionId, op, id)
activate Controller
Controller -> ansrepository : findAll()
activate ansrepository
deactivate ansrepository
deactivate Controller

UI --> SM : Mostra a informação pedida\n informando o sucesso da operação
deactivate UI

deactivate SM

@enduml