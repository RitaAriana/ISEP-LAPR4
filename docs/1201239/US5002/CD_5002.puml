@startuml

class CallAGVManagerController {
+create()
+connectDaemon(address,port)
+callFIFO()
+getAGVInfo()
+closeConnection()
}

class DigitalTwinDaemon {
+main()
-buildServerDependencies()
}

class DigitalTwinProtocolServer {
+run()
-listen()
+start()
}

class RequestMessageParser {
-getManagerController()
-getDashboardController()
+parse()
-isStringParam(string)
-callTaskAssignment(inputLine,tokens)
-parseGetAGVInformations(inputLine,tokens)
}

class DigitalTwinProtocolRequest {
-request
---
+execute()
+isGoodbye()
#buildServerError(errorDescription)
#buildBadRequest(errorDescription)
}

DigitalTwinDaemon -> DigitalTwinProtocolServer
DigitalTwinProtocolServer -> RequestMessageParser
DigitalTwinProtocolServer -> DigitalTwinProtocolRequest

CallAGVManagerController -> AGVManagerDaemon

AGVManagerDaemon -> DigitalTwinDaemon

class AGVManagerDaemon {
+main()
-buildServerDependencies()
}

class AgvManagerProtocolServer {
+run()
-listen()
+start()
}

class RequestMessageParser {
-getManagerController()
-getDashboardController()
+parse()
-isStringParam(string)
-callTaskAssignment(inputLine,tokens)
-parseGetAGVInformations(inputLine,tokens)
}

class AGVManagerProtocolRequest {
-request
---
+execute()
+isGoodbye()
#buildServerError(errorDescription)
#buildBadRequest(errorDescription)
}

AGVManagerDaemon -> AgvManagerProtocolServer
AgvManagerProtocolServer -> RequestMessageParser
AgvManagerProtocolServer -> AGVManagerProtocolRequest


@enduml